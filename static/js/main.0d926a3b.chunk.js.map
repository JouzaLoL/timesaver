{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["FileInput","props","className","checked","htmlFor","name","toLowerCase","icon","id","type","App","useState","videoName","setVideoName","videoSrc","setVideoSrc","subtitlesSrc","setSubtitlesSrc","speed","setSpeed","dialogueSpeed","setDialogueSpeed","isDialogue","setIsDialogue","Boolean","accept","onChange","e","target","files","URL","createObjectURL","VTTConverter","getURL","then","url","catch","console","error","value","step","min","max","Number","controls","src","onTimeUpdate","currentTarget","playbackRate","onPlay","video","textTracks","length","currentTrack","oncuechange","_","activeCues","label","kind","srcLang","default","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0d926a3b.chunk.js","sourcesContent":["import React, { SyntheticEvent, useState } from \"react\";\n// @ts-ignore\nimport VTTConverter from \"srt-webvtt\";\n\nfunction FileInput(props: React.ComponentProps<\"input\"> & { icon: string }) {\n\treturn (\n\t\t<>\n\t\t\t<label\n\t\t\t\tclassName={`hover:bg-gray-800 hover:cursor-pointer\n\t\t\t\t\t\t\t bg-gray-700 px-3 py-2 rounded leading-normal ${props.checked ?\n\t\t\t\t\t\"hover:bg-green-400 bg-green-300 text-green-800\" : \"\"}`}\n\t\t\t\thtmlFor={props.name?.toLowerCase()}\n\t\t\t>\n\t\t\t\t{`${props.checked ? \"âœ… \" : props.icon}${props.name}`}\n\t\t\t</label>\n\t\t\t<input\n\t\t\t\tid={props.name?.toLowerCase()}\n\t\t\t\tname={props.name?.toLowerCase()}\n\t\t\t\tclassName=\"hidden\"\n\t\t\t\ttype=\"file\"\n\t\t\t\t{...props}\n\t\t\t/>\n\t\t</>\n\t);\n}\n\nfunction App() {\n\tconst [videoName, setVideoName] = useState<string | null>(null);\n\tconst [videoSrc, setVideoSrc] = useState(\"\");\n\tconst [subtitlesSrc, setSubtitlesSrc] = useState(\"\");\n\n\tconst [speed, setSpeed] = useState(1.5);\n\tconst [dialogueSpeed, setDialogueSpeed] = useState(1);\n\n\tconst [isDialogue, setIsDialogue] = useState(false);\n\n\tconst onPlay = (e: SyntheticEvent<HTMLVideoElement, Event>) => {\n\t\tconst video = e.target as HTMLVideoElement;\n\t\tif (video.textTracks.length > 0) {\n\t\t\tconst tracks = video.textTracks;\n\t\t\tconst currentTrack = tracks[0];\n\t\t\tcurrentTrack.oncuechange = _ => {\n\t\t\t\tconst cues = currentTrack.activeCues;\n\t\t\t\tif (cues.length > 0) {\n\t\t\t\t\tsetIsDialogue(true);\n\t\t\t\t} else {\n\t\t\t\t\tsetIsDialogue(false);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className=\"h-screen flex flex-col justify-between\">\n\t\t\t<nav className=\"text-gray-200 flex items-center justify-between p-5\">\n\t\t\t\t<h1 className=\"text-gray-100 text-2xl overflow-hidden w-1/3\">\n\t\t\t\t\t{videoName ?? \"Timesaver\"}\n\t\t\t\t</h1>\n\t\t\t\t<div className=\"w-1/3 flex justify-center items-center\">\n\t\t\t\t\t<span className=\"mr-5\">\n\t\t\t\t\t\t<FileInput\n\t\t\t\t\t\t\tname={\"Media\"}\n\t\t\t\t\t\t\ticon={\"â–¶ \"}\n\t\t\t\t\t\t\tchecked={Boolean(videoName)}\n\t\t\t\t\t\t\taccept={\"video/*\"}\n\t\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\t\tif (e.target.files) {\n\t\t\t\t\t\t\t\t\tsetVideoName(e.target.files[0].name);\n\t\t\t\t\t\t\t\t\tsetVideoSrc(URL.createObjectURL(e.target.files[0]));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</span>\n\t\t\t\t\t<FileInput\n\t\t\t\t\t\tname={\"Subtitles\"}\n\t\t\t\t\t\ticon={\"ðŸ“„ \"}\n\t\t\t\t\t\tchecked={Boolean(subtitlesSrc)}\n\t\t\t\t\t\taccept={\"text/srt\"}\n\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\tif (e.target.files) {\n\t\t\t\t\t\t\t\tconst converter = new VTTConverter(e.target.files[0]);\n\t\t\t\t\t\t\t\tconverter\n\t\t\t\t\t\t\t\t\t.getURL()\n\t\t\t\t\t\t\t\t\t.then((url: string) => {\n\t\t\t\t\t\t\t\t\t\tsetSubtitlesSrc(url);\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t.catch((e: Error) => {\n\t\t\t\t\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"flex items-center w-1/3 justify-end\">\n\t\t\t\t\t<span className=\"mr-2\">Speed inside dialogue: {dialogueSpeed}</span>\n\t\t\t\t\t<input type=\"range\" value={dialogueSpeed} step={0.1} min={1} max={5} onChange={(e) => {\n\t\t\t\t\t\tsetDialogueSpeed(Number(e.target.value));\n\t\t\t\t\t}} />\n\t\t\t\t\t<span className=\"mr-2\">Speed oustide of dialogue: {speed}</span>\n\t\t\t\t\t<input type=\"range\" value={speed} step={0.1} min={1} max={5} onChange={(e) => {\n\t\t\t\t\t\tsetSpeed(Number(e.target.value));\n\t\t\t\t\t}} />\n\t\t\t\t</div>\n\t\t\t</nav>\n\t\t\t<main className=\"text-gray-100 flex flex-col justify-center items-center\">\n\t\t\t\t{videoSrc ? (\n\t\t\t\t\t<div className=\"rounded p-5 overflow-hidden\">\n\t\t\t\t\t\t<video\n\t\t\t\t\t\t\tcontrols\n\t\t\t\t\t\t\tsrc={videoSrc}\n\t\t\t\t\t\t\tonTimeUpdate={(e) => {\n\t\t\t\t\t\t\t\te.currentTarget.playbackRate = isDialogue ? dialogueSpeed : speed;\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonPlay={onPlay}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{Boolean(subtitlesSrc) && (\n\t\t\t\t\t\t\t\t<track\n\t\t\t\t\t\t\t\t\tlabel={\"Subtitles\"}\n\t\t\t\t\t\t\t\t\tkind={\"subtitles\"}\n\t\t\t\t\t\t\t\t\tsrcLang={\"en\"}\n\t\t\t\t\t\t\t\t\tsrc={subtitlesSrc}\n\t\t\t\t\t\t\t\t\tdefault\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</video>\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<span className=\"my-5\">Add your media using the button above</span>\n\t\t\t\t)}\n\t\t\t</main>\n\t\t\t<div className=\"text-center text-gray-600 text-sm py-2\">Â© Josef Vacek</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n/* Tailwind compiled styles */\nimport \"./styles.css\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}